// Generated by dts-bundle-generator v9.5.1

export interface ComponentProps {
	tag?: string;
	className?: string;
	text?: string;
}
declare class Component<T extends HTMLElement = HTMLElement> {
	private node;
	private children;
	private disabled;
	constructor({ tag, className, text }: ComponentProps, children?: Component[]);
	createElement(tag: string): void;
	appendChildren(children: Component[]): void;
	append(child: Component): void;
	getNode(): T;
	getChildren(): Component[];
	setTextContent(text: string): void;
	setAttribute(attribute: string, value: string): void;
	removeAttribute(attribute: string): void;
	toggleClass(className: string): void;
	addClass(className: string): void;
	removeClass(className: string): void;
	setDisabled(disabled: boolean): void;
	getDisabled(): boolean;
	addListener(event: keyof HTMLElementEventMap, callback: (event?: Event) => void, options?: boolean | AddEventListenerOptions): void;
	removeListener(event: keyof HTMLElementEventMap, callback: (event?: Event) => void, options?: boolean | AddEventListenerOptions): void;
	removeChildren(): void;
	remove(): void;
}
export type RouteHandler = () => Component;
export type Routes = Record<string, RouteHandler>;
declare class Router {
	private routes;
	private appRoot;
	private currentComponent;
	constructor(routes: Routes, root: HTMLElement);
	navigate(path: string): void;
	private init;
	private renderRoute;
}
export declare const appRouter: Router;

export {};
